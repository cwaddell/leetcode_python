class Solution:
    def matrix_multiply(self, a, b):
        # Perform matrix multiplication in-place
        a00, a01, a02 = a[0]
        a10, a11, a12 = a[1]
        a20, a21, a22 = a[2]
        b00, b01, b02 = b[0]
        b10, b11, b12 = b[1]
        b20, b21, b22 = b[2]

        a[0][0] = a00 * b00 + a01 * b10 + a02 * b20
        a[0][1] = a00 * b01 + a01 * b11 + a02 * b21
        a[0][2] = a00 * b02 + a01 * b12 + a02 * b22
        a[1][0] = a10 * b00 + a11 * b10 + a12 * b20
        a[1][1] = a10 * b01 + a11 * b11 + a12 * b21
        a[1][2] = a10 * b02 + a11 * b12 + a12 * b22
        a[2][0] = a20 * b00 + a21 * b10 + a22 * b20
        a[2][1] = a20 * b01 + a21 * b11 + a22 * b21
        a[2][2] = a20 * b02 + a21 * b12 + a22 * b22

    def power(self, n):
        F = [[1, 0, 0], [1, 0, 0], [0, 0, 0]]
        M = [[1, 1, 1], [1, 0, 0], [0, 1, 0]]
        
        # Binary exponentiation
        while n > 0:
            if n % 2 == 1:
                self.matrix_multiply(F, M)
            self.matrix_multiply(M, M)
            n >>= 1
        
        return F[0][0] + F[0][1]

    def tribonacci(self, n: int) -> int:
        if n == 0:
            return 0
        if n == 1 or n == 2:
            return 1
    
        return self.power(n - 2)
