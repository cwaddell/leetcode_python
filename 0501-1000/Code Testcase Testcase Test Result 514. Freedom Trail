class Solution:
    def findRotateSteps(self, ring: str, key: str) -> int:
        char_positions = defaultdict(list)
        for i, char in enumerate(ring):
            char_positions[char].append(i)
        
        n = len(ring)
        m = len(key)
        dp = [[float('inf')] * n for _ in range(m)]
        
        for pos in char_positions[key[0]]:
            dp[0][pos] = min(pos, n - pos) + 1
        
        for i in range(1, m):
            for j in char_positions[key[i]]:
                for k in char_positions[key[i - 1]]:
                    diff = abs(j - k)
                    steps = min(diff, n - diff)
                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + steps + 1)
        
        return min(dp[-1])
