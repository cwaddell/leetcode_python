class Solution:
    def strongPasswordChecker(self, password: str) -> int:
        n = len(password)
        replaces = 0
        oneDel = 0
        twoDel = 0
        deletes = n - 20

        missing_requirements = 3
        if any(char.islower() for char in password):
            missing_requirements -= 1
        if any(char.isupper() for char in password):
            missing_requirements -= 1
        if any(char.isdigit() for char in password):
            missing_requirements -= 1

        if n < 6:
            return max(6 - n, missing_requirements)
        
        i = 2
        while i < n:
            if password[i] == password[i - 1] and password[i - 1] == password[i - 2]:
                repeat_len = 2 
                while i < n and password[i] == password[i - 1]:
                    repeat_len += 1
                    i += 1
                replaces += repeat_len // 3  # 'xxxxxxx' -> 'xx*xx*x'
                if repeat_len % 3 == 0:
                    oneDel += 1
                if repeat_len % 3 == 1:
                    twoDel += 1
            else:
                i += 1

        if n <= 20:
            return max(replaces, missing_requirements)

        replaces -= min(oneDel, deletes)
        replaces -= min(max(deletes - oneDel, 0), twoDel * 2) // 2
        replaces -= max(deletes - oneDel - twoDel * 2, 0) // 3

        return deletes + max(replaces, missing_requirements)
