class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        deadends = set(deadends)
        if "0000" in deadends:
            return -1
        if target == "0000":
            return 0

        start_queue = {"0000"}
        end_queue = {target}
        start_visited = {"0000"}
        end_visited = {target}
        turns = 0

        while start_queue and end_queue:
            new_states = set()
            for current in start_queue:
                if current in end_visited:
                    return turns
                for i in range(4):
                    for move in [-1, 1]:
                        new_digit = (int(current[i]) + move) % 10
                        new_state = current[:i] + str(new_digit) + current[i+1:]
                        if new_state not in deadends and new_state not in start_visited:
                            new_states.add(new_state)
                            start_visited.add(new_state)
            start_queue = new_states
            turns += 1

            start_queue, end_queue = end_queue, start_queue
            start_visited, end_visited = end_visited, start_visited

        return -1
